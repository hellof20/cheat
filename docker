##将非root加入dockers组
sudo groupadd docker
sudo usermod -aG docker ec2-user

##批量修改image tag
for i in $(docker images --format "{{.Repository}}:{{.Tag}}");do docker tag $i 799967190878.dkr.ecr.cn-northwest-1.amazonaws.com.cn/$i;docker push 799967190878.dkr.ecr.cn-northwest-1.amazonaws.com.cn/$i;done

##连接docker ssl仓库，报Get https://gitlab.example.com:4567/v2/: x509: certificate signed by unknown authority
cp /root/certs/domain.crt  /etc/docker/certs.d/mydockerhub.com\:5000/ca.crt
或者
cat /root/certs/domain.crt >> /etc/pki/tls/certs/ca-bundle.crt 

#查看docker run命令
pip install runlike
runlike <container_id>
or
docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike <container_name_or_ID>

#使用别的容器的namespace
docker run -d --name http nginx:alpine
docker run --net=container:http benhall/curl curl -s localhost
docker run --pid=container:http alpine ps aux

#docker容器cpu和内存限制
--cpus=2            一共可以使用几个CPU
--cpuset-cpus="1,3" 使用指定的CPU
--cpu-shares=512    使用CPU的权重
--memory=100m       可使用的内存

#显示docker hub中某个image的所有tag
curl 'https://registry.hub.docker.com/v2/repositories/library/centos/tags/'|jq '."results"[]["name"]'

# Get the process ID for a container
docker inspect --format {{.State.Pid}} <container_name_or_ID>

# List the current mounted volumes for a container (and pretty print)
docker inspect --format='{{json .Volumes}}' <container_id> | python -mjson.tool

#查看容器的日志格式
docker inspect --format '{{ .HostConfig.LogConfig }}' <container_id>

#查看容器的健康状况（前提得是已经设置了健康检）
docker inspect --format "{{json .State.Health.Status }}" srv
docker inspect --format "{{json .State.Health }}" srv

#杀死所有正在运行的容器
docker kill $(docker ps -a -q)

#删除所有已经停止的容器
docker rm $(docker ps -a -q)

#删除所有未打标签的镜像
docker rmi $(docker images -q -f dangling=true)

#删除不用的本地volume
docker volume prune

#容器重启策略
--restart=always或者--restart=on-failure:3

#label
docker run -l user=12345 -d redis
docker run --label-file=labels -d redis

#查看label
docker inspect -f "{{json .Config.Labels }}" <container_id>
docker inspect -f "{{json .ContainerConfig.Labels }}" <container_image_id>

#查看容器启动命令
docker inspect -f "{{.Name}} {{.Config.Cmd}}" $(docker ps -a -q)

#filter container
docker ps -f "label=user=scrapbook"
docker ps -f name=redis -q

#filter images
docker images -f "label=vendor=Katacoda"

#查看docker容器使用量
docker ps -q | xargs docker stats
docker stats --no-stream

#format输出格式
docker ps --format '{{.Names}} container is using {{.Image}} image'
docker ps --format 'table {{.Names}}\t{{.Image}}'
docker ps -q | xargs docker inspect --format '{{ .Id }} - {{ .Name }} - {{ .NetworkSettings.IPAddress }}'

