##修改svc类型
kubectl -n cicd patch svc argocd-server -p '{"spec": {"type": "LoadBalancer"}}'

#自动补全
yum install bash-completion -y
echo "source <(kubectl completion bash)" >> ~/.bashrc
zsh的话在.zshrc的插件中加上kubectl

## 添加注释
kubectl -n kube-system annotate deploy/cluster-autoscaler cluster-autoscaler.kubernetes.io/safe-to-evict="false"

#访问k8s的其他方式
curl --cacert ./kube-ca.pem  --key ./bilibili-key.pem --cert ./bilibili.pem https://161.189.48.233:6443/api/v1
kubectl --server=https://172.31.4.176:6443 --certificate-authority=kube-ca.pem  --client-certificate=bilibili.pem --client-key=bilibili-key.pem get pods

#创建用户并给用户分配admin权限
openssl genrsa -out bilibili-key.pem 2048
openssl req -new -key bilibili-key.pem -out bilibili.csr -subj "/CN=bilibili"
openssl x509 -req -in bilibili.csr -CA kube-ca.pem -CAkey kube-ca-key.pem -CAcreateserial -out bilibili.pem -days 365
kubectl create rolebinding bilibili --clusterrole=admin --user=bilibili
kubectl create clusterrolebinding bilibili --clusterrole=cluster-admin --user=bilibili

#context
kubectl config set-cluster product --server=https://192.168.44.132:6443 --certificate-authority=/etc/kubernetes/pki/ca.crt
kubectl config set-credentials ppp --client-certificate=/etc/kubernetes/pki/admin.pem --client-key=/etc/kubernetes/pki/admin-key.pem
kubectl config set-context system --cluster=product --user=ppp
kubectl config use-context system

##部署metric server
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml
国内需要把镜像修改为048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/gcr/google_containers

##HPA测试
kubectl apply -f https://k8s.io/examples/application/php-apache.yaml
kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10
kubectl run -it --rm load-generator --image=busybox /bin/sh --generator=run-pod/v1
while true; do wget -q -O- http://php-apache; done
kubectl get hpa

#查看所有api resource
kubectl api-resources -o wide --namespaced=true/false --verbs=list,get --api-group=extension
kubectl get apiservices
kubectl api-versions

#debug api request
--v=0	Generally useful for this to ALWAYS be visible to an operator.
--v=1	A reasonable default log level if you don’t want verbosity.
--v=2	Useful steady state information about the service and important log messages that may correlate to significant changes in the system. This is the recommended default log level for most systems.
--v=3	Extended information about changes.
--v=4	Debug level verbosity.
--v=6	Display requested resources.
--v=7	Display HTTP request headers.
--v=8	Display HTTP request contents.
--v=9	Display HTTP request contents without truncation of contents

##常用
#创建deploy
kubectl create deploy mynginx --image=nginx:1.13
#创建pod
kubectl run alpine --image=alpine:3.6 --image-pull-policy=IfNotPresent -l "app=alpine,env=prod" --replicas=1 --env=username=pwm --env=password=123 --record --command -- sleep 36000
kubectl run nginx --image=nginx:1.13 --port=80 --replicas=1 --requests='cpu=0.1,memory=128Mi' --limits='cpu=0.2,memory=256Mi' --restart=Always --image-pull-policy=IfNotPresent --record
#将deploy expose成服务
kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort/LoadBalancer

##open api server or expose service
kubectl proxy --accept-paths='^.*' --address='0.0.0.0' --port=8080 --accept-hosts='^*$'
#access service from outside
http://192.168.44.136:8080/api/v1/namespaces/mytest/services/nginx:80/proxy/
#access kubelet api
http://192.168.44.136:8080/api/v1/nodes/ubuntu/proxy/stats/summary或/stats/*或/metrics/*或/logs/*或/spec/*
#access api use kubectl
kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes/pp"|jq .

##污点和容忍度
[ NoSchedule | PreferNoSchedule | NoExecute ]
NoSchedule: 一定不能被调度
PreferNoSchedule: 尽量不要调度
NoExecute: 不仅不会调度, 还会驱逐Node上已有的Pod
kubectl taint node node1 key1=value1:NoSchedule
kubectl taint node node1 key1:NoSchedule-
tolerations:
- key: "node-role.kubernetes.io/master"
  operator: "Equal"
  value: ""
  effect: "NoSchedule"

##查看k8s集群状态
kubectl get cs
kubectl cluster-info
kubectl get nodes
#查看当前leader
kubectl get endpoints kube-controller-manager --namespace=kube-system  -o yaml

#K8S的DNS绝对路径
svc_name.namespace_name.svc + cluster.local

#创建HPA
kubectl autoscale deploy/nginx --min=1 --max=5 --cpu-percent=30

#secret
#创建tls密钥
kubectl create secret tls frontend-secret --key ./devops.key --cert ./devops.crt
#创建registry密钥
kubectl create secret docker-registry myregistrykey --docker-server=10.18.100.79:8800 --docker-username=admin --docker-password=2wsx#EDC --docker-email=devops@dxc.com
#创建generic密钥
kubectl create secret generic test-secret --from-literal=username='my-app' --from-literal=password='39528$vdg7Jb'

#label
#get label
kubectl get po --show-labels
kubectl get nodes -L node.kubernetes.io/instance-type
#label-selector
kubectl get deploy -l app=nginx
#update label
kubectl label pod nginx-95fb6b497-58r5p  tier=backend --overwrite
#add label
kubectl label pod nginx-95fb6b497-58r5p  tier=backend
kubectl label node 192.168.174.135 disktype=ssd
#delete label
kubectl label pod nginx-95fb6b497-58r5p  tier-

##filter
--all-namespace
-l run=myapp
--field-selector "status.phase!=Running,spec.restartPolicy=Always"
-w
#field-selector
kubectl get pods --field-selector status.phase=Running
kubectl get services --field-selector metadata.namespace!=default
kubectl get pods --field-selector=status.phase!=Running,spec.restartPolicy=Always
kubectl get pods --field-selector metadata.name=redis-master

##format
#use go-template
kubectl get pods --all-namespaces -o go-template --template='{{range .items}}{{printf "|%-20s|%-50s|%-30s|\n" .metadata.namespace .metadata.name .metadata.uid}}{{end}}'
kubectl get pods --all-namespaces -o go-template --template="{{range .items}}{{range .spec.containers}}{{.image}} {{end}}{{end}}"
#use jq
kubectl get pods -o json|jq -r '.items[].spec.containers[] | .name +" "+.image'
kubectl get pods -o json|jq '.items[].metadata | .name +" "+ .ownerReferences[].name + " "+.ownerReferences[].kind' #获取pod的父亲名字和类型
#use jsonpath
kubectl get pods --all-namespaces -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}'
#use custom-columns 
kubectl get pods <pod-name> -o=custom-columns=NAME:.metadata.name,RSRC:.metadata.resourceVersion

#滚动升级:
#升级
kubectl set image deploy/alpine alpine=alpine:latest --record
#查看部署历史
kubectl rollout history deployments/alpine
#回滚
kubectl rollout undo deployments/alpine

#标记某个storageclass为default
kubectl patch storageclass <your-class-name> -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
#修改PV的回收策略
kubectl patch pv <your-pv-name> -p '{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'


#Advertise a new extended resource on one of your Nodes
#add
curl --header "Content-Type: application/json-patch+json" --request PATCH --data '[{"op": "add", "path": "/status/capacity/dongle", "value": "4"}]' http://localhost:8080/api/v1/nodes/pp/status
#remove
curl --header "Content-Type: application/json-patch+json" --request PATCH --data '[{"op": "remove", "path": "/status/capacity/dongle"' http://localhost:8080/api/v1/nodes/pp/status


##强制删除
# 强制删除POD
kubectl delete pod PODNAME --force --grace-period=0

# 强制删除NAMESPACE
kubectl delete namespace NAMESPACENAME --force --grace-period=0

#Fedreation
#init
kubefed init fellowship --host-cluster-context=system --dns-provider="coredns" --dns-zone-name="example.com." --dns-provider-config="/root/coredns-provider.conf" --api-server-service-type="NodePort" --image='markdotsonrs/fcp-amd64:v1.9.0-alpha.3' --federation-system-namespace='federation'

#查看从某个时间点开始的日志信息
kubectl -n devops logs devportal-7b54df68bc-cpzkh --since-time="2018-12-01T04:58:20+08:00"
#查看最近多久的日志
kubectl -n devops logs devportal-7b54df68bc-cpzkh --since=10s

